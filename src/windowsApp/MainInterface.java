/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package windowsApp;

import dao.Dao;
import exceptions.ExceptionsDao;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import models.Runway;
import models.Spaceport;

/**
 *
 * @author dafna
 */
public class MainInterface extends javax.swing.JFrame {
    
    List<Spaceport> spaceportsApp = new ArrayList<>();
    List<Runway> runways = new ArrayList<>();

    /**
     * Creates new form MainInterface
     */
    public MainInterface() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JMenuBar();
        general = new javax.swing.JMenu();
        newSpaceport = new javax.swing.JMenuItem();
        newRunway = new javax.swing.JMenuItem();
        newSpaceship = new javax.swing.JMenuItem();
        deleteSpaceship = new javax.swing.JMenuItem();
        flight = new javax.swing.JMenu();
        landings = new javax.swing.JMenuItem();
        departures = new javax.swing.JMenuItem();
        notifications = new javax.swing.JMenu();
        endCleaning = new javax.swing.JMenuItem();
        endMaintenance = new javax.swing.JMenuItem();
        informations = new javax.swing.JMenu();
        spaceships = new javax.swing.JMenuItem();
        spaceports = new javax.swing.JMenuItem();
        spaceportsStatus = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        general.setText("General");

        newSpaceport.setText("New spaceport");
        newSpaceport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newSpaceportActionPerformed(evt);
            }
        });
        general.add(newSpaceport);

        newRunway.setText("New runway");
        newRunway.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newRunwayActionPerformed(evt);
            }
        });
        general.add(newRunway);

        newSpaceship.setText("New spaceship");
        newSpaceship.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newSpaceshipActionPerformed(evt);
            }
        });
        general.add(newSpaceship);

        deleteSpaceship.setText("Delete spaceship");
        general.add(deleteSpaceship);

        mainPanel.add(general);

        flight.setText("Flight");

        landings.setText("Landings");
        flight.add(landings);

        departures.setText("Departures");
        flight.add(departures);

        mainPanel.add(flight);

        notifications.setText("Notifications");

        endCleaning.setText("End of cleaning");
        notifications.add(endCleaning);

        endMaintenance.setText("End of maintenance");
        notifications.add(endMaintenance);

        mainPanel.add(notifications);

        informations.setText("Informations");

        spaceships.setText("Spaceships");
        informations.add(spaceships);

        spaceports.setText("Spaceports");
        informations.add(spaceports);

        spaceportsStatus.setText("Spaceports Status");
        informations.add(spaceportsStatus);

        mainPanel.add(informations);

        setJMenuBar(mainPanel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 716, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 418, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
/**
     * Open a window to create a new spaceport
     *
     * @param evt
     */
    private void newSpaceportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newSpaceportActionPerformed
        NewSpaceport newSpaceport = new NewSpaceport(this, true);
        newSpaceport.setLocationRelativeTo(null);
        newSpaceport.setVisible(true);
    }//GEN-LAST:event_newSpaceportActionPerformed

    private void newSpaceshipActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newSpaceshipActionPerformed
        try {
            spaceportsApp = Dao.getDao().selectAllSpaceport();
            runways = Dao.getDao().selectRunwaysByStatus("FREE");
            if (spaceportsApp.isEmpty() || runways.isEmpty()) {
                JOptionPane.showMessageDialog(this, "There is no airport/runways available", "Message", JOptionPane.WARNING_MESSAGE);                
            }else{
                NewSpaceship newSpaceship = new NewSpaceship(this, true);
                newSpaceship.setLocationRelativeTo(null);
                newSpaceship.setVisible(true);
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "" + ex.getMessage(), "Message", JOptionPane.WARNING_MESSAGE);
        }
        
    }//GEN-LAST:event_newSpaceshipActionPerformed

    private void newRunwayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newRunwayActionPerformed
        try {
            spaceportsApp = Dao.getDao().selectAllSpaceport();            
            if (spaceportsApp.isEmpty()) {
                JOptionPane.showMessageDialog(this, "There is no airport available", "Message", JOptionPane.WARNING_MESSAGE);                
            }else{
                NewRunway newRunway = new NewRunway(this, true);
                newRunway.setLocationRelativeTo(null);
                newRunway.setVisible(true);
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "" + ex.getMessage(), "Message", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_newRunwayActionPerformed

  
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem deleteSpaceship;
    private javax.swing.JMenuItem departures;
    private javax.swing.JMenuItem endCleaning;
    private javax.swing.JMenuItem endMaintenance;
    private javax.swing.JMenu flight;
    private javax.swing.JMenu general;
    private javax.swing.JMenu informations;
    private javax.swing.JMenuItem landings;
    private javax.swing.JMenuBar mainPanel;
    private javax.swing.JMenuItem newRunway;
    private javax.swing.JMenuItem newSpaceport;
    private javax.swing.JMenuItem newSpaceship;
    private javax.swing.JMenu notifications;
    private javax.swing.JMenuItem spaceports;
    private javax.swing.JMenuItem spaceportsStatus;
    private javax.swing.JMenuItem spaceships;
    // End of variables declaration//GEN-END:variables
}
