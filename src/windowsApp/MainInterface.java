/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package windowsApp;

import dao.Dao;
import exceptions.InputException;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JInternalFrame;
import javax.swing.JOptionPane;
import javax.swing.plaf.basic.BasicInternalFrameUI;
import models.Runway;
import models.Spaceport;
import models.Spaceship;

/**
 *
 * @author dafna
 */
public class MainInterface extends javax.swing.JFrame {

    List<Spaceport> spaceportsApp = new ArrayList<>();
    List<Runway> runways = new ArrayList<>();
    List<Spaceship> spaceshipsApp = new ArrayList<>();

    /**
     * Creates new form MainInterface
     */
    public MainInterface() {
        initComponents();
        Welcome welcom = new Welcome();
        changeIF(welcom);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        desktop = new javax.swing.JDesktopPane();
        mainPanel = new javax.swing.JMenuBar();
        general = new javax.swing.JMenu();
        newSpaceport = new javax.swing.JMenuItem();
        newRunway = new javax.swing.JMenuItem();
        newSpaceship = new javax.swing.JMenuItem();
        deleteSpaceship = new javax.swing.JMenuItem();
        flight = new javax.swing.JMenu();
        landings = new javax.swing.JMenuItem();
        departures = new javax.swing.JMenuItem();
        notifications = new javax.swing.JMenu();
        endCleaning = new javax.swing.JMenuItem();
        endMaintenance = new javax.swing.JMenuItem();
        informations = new javax.swing.JMenu();
        spaceships = new javax.swing.JMenuItem();
        spaceports = new javax.swing.JMenuItem();
        spaceportsStatus = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Welcom to StarStucom");

        javax.swing.GroupLayout desktopLayout = new javax.swing.GroupLayout(desktop);
        desktop.setLayout(desktopLayout);
        desktopLayout.setHorizontalGroup(
            desktopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 716, Short.MAX_VALUE)
        );
        desktopLayout.setVerticalGroup(
            desktopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 418, Short.MAX_VALUE)
        );

        general.setText("General");

        newSpaceport.setText("New spaceport");
        newSpaceport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newSpaceportActionPerformed(evt);
            }
        });
        general.add(newSpaceport);

        newRunway.setText("New runway");
        newRunway.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newRunwayActionPerformed(evt);
            }
        });
        general.add(newRunway);

        newSpaceship.setText("New spaceship");
        newSpaceship.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newSpaceshipActionPerformed(evt);
            }
        });
        general.add(newSpaceship);

        deleteSpaceship.setText("Delete spaceship");
        deleteSpaceship.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteSpaceshipActionPerformed(evt);
            }
        });
        general.add(deleteSpaceship);

        mainPanel.add(general);

        flight.setText("Flight");

        landings.setText("Land spaceship");
        landings.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                landingsActionPerformed(evt);
            }
        });
        flight.add(landings);

        departures.setText("Take off spaceship");
        departures.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                departuresActionPerformed(evt);
            }
        });
        flight.add(departures);

        mainPanel.add(flight);

        notifications.setText("Notifications");

        endCleaning.setText("End of cleaning");
        endCleaning.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                endCleaningActionPerformed(evt);
            }
        });
        notifications.add(endCleaning);

        endMaintenance.setText("End of maintenance");
        endMaintenance.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                endMaintenanceActionPerformed(evt);
            }
        });
        notifications.add(endMaintenance);

        mainPanel.add(notifications);

        informations.setText("Informations");

        spaceships.setText("Spaceships");
        spaceships.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                spaceshipsActionPerformed(evt);
            }
        });
        informations.add(spaceships);

        spaceports.setText("Spaceports");
        spaceports.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                spaceportsActionPerformed(evt);
            }
        });
        informations.add(spaceports);

        spaceportsStatus.setText("Spaceports Status");
        spaceportsStatus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                spaceportsStatusActionPerformed(evt);
            }
        });
        informations.add(spaceportsStatus);

        mainPanel.add(informations);

        setJMenuBar(mainPanel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(desktop)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(desktop)
        );

        getAccessibleContext().setAccessibleName("Welcome");

        pack();
    }// </editor-fold>//GEN-END:initComponents
/**
     * Open a window to create a new spaceport
     *
     * @param evt
     */
    private void newSpaceportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newSpaceportActionPerformed
        NewSpaceport newSpaceport = new NewSpaceport(this, true);
        newSpaceport.setLocationRelativeTo(null);
        newSpaceport.setVisible(true);
    }//GEN-LAST:event_newSpaceportActionPerformed

    /**
     * Open a window to create a new spaceship
     *
     * @param evt
     */
    private void newSpaceshipActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newSpaceshipActionPerformed
        try {
            spaceportsApp = Dao.getDao().selectAllSpaceport();
            runways = Dao.getDao().selectRunwaysByStatus("FREE");
            if (spaceportsApp.isEmpty() || runways.isEmpty()) {
                JOptionPane.showMessageDialog(this, "There is no airport/runways available", "Message", JOptionPane.WARNING_MESSAGE);
            } else {
                NewSpaceship newSpaceship = new NewSpaceship(this, true);
                newSpaceship.setLocationRelativeTo(null);
                newSpaceship.setVisible(true);
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "" + ex.getMessage(), "Message", JOptionPane.WARNING_MESSAGE);
        }

    }//GEN-LAST:event_newSpaceshipActionPerformed

    /**
     * Open a window to create a new runway
     *
     * @param evt
     */
    private void newRunwayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newRunwayActionPerformed
        try {
            spaceportsApp = Dao.getDao().selectAllSpaceport();
            if (spaceportsApp.isEmpty()) {
                JOptionPane.showMessageDialog(this, "There is no airport available", "Message", JOptionPane.WARNING_MESSAGE);
            } else {
                NewRunway newRunway = new NewRunway(this, true);
                newRunway.setLocationRelativeTo(null);
                newRunway.setVisible(true);
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "" + ex.getMessage(), "Message", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_newRunwayActionPerformed

    /**
     * Open a window for delete spaceship
     *
     * @param evt
     */
    private void deleteSpaceshipActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteSpaceshipActionPerformed
        try {
            spaceshipsApp = Dao.getDao().selectAllSpaceship();
            if (spaceshipsApp.isEmpty()) {
                JOptionPane.showMessageDialog(this, "There is no spaceship available", "Message", JOptionPane.WARNING_MESSAGE);
            } else {
                DeleteSpaceship deleteSpaceship = new DeleteSpaceship(this, true);
                deleteSpaceship.setLocationRelativeTo(null);
                deleteSpaceship.setVisible(true);
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "" + ex.getMessage(), "Message", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_deleteSpaceshipActionPerformed

    /**
     * Open a window to departure a one spaceship
     *
     * @param evt
     */
    private void departuresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_departuresActionPerformed
        try {
            spaceshipsApp = Dao.getDao().selectSpaceshipByStatus("LANDED");
            if (spaceshipsApp.isEmpty()) {
                JOptionPane.showMessageDialog(this, "There is no spaceship landed", "Message", JOptionPane.WARNING_MESSAGE);
            } else {
                DeploymentSpaceship deployment = new DeploymentSpaceship(this, true);
                deployment.setLocationRelativeTo(null);
                deployment.setVisible(true);
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "" + ex.getMessage(), "Message", JOptionPane.WARNING_MESSAGE);
        }

    }//GEN-LAST:event_departuresActionPerformed

    /**
     * Open a window to landing a one spaceship
     *
     * @param evt
     */
    private void landingsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_landingsActionPerformed
        try {
            spaceshipsApp = Dao.getDao().selectSpaceshipByStatus("FLYING");
            if (spaceshipsApp.isEmpty()) {
                JOptionPane.showMessageDialog(this, "There is no spaceship flying", "Message", JOptionPane.WARNING_MESSAGE);
            } else {
                LandingSpaceship landing = new LandingSpaceship(this, true);
                landing.setLocationRelativeTo(null);
                landing.setVisible(true);
            }
        } catch (SQLException | InputException ex) {
            JOptionPane.showMessageDialog(this, "" + ex.getMessage(), "Message", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_landingsActionPerformed

    /**
     * Open a window to finish maintenance of spaceship
     *
     * @param evt
     */
    private void endMaintenanceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_endMaintenanceActionPerformed
        EndMaintenance endMaintenance = new EndMaintenance();
        changeIF(endMaintenance);
    }//GEN-LAST:event_endMaintenanceActionPerformed

    /**
     * Open a window to finish cleaning of runway
     *
     * @param evt
     */
    private void endCleaningActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_endCleaningActionPerformed
        EndCleaning endCleaning = new EndCleaning();
        changeIF(endCleaning);
    }//GEN-LAST:event_endCleaningActionPerformed

    /**
     * Open a window to show informations about spaceport by certain galaxy
     *
     * @param evt
     */
    private void spaceportsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_spaceportsActionPerformed
        Informations information = new Informations("galaxy");
        changeIF(information);
    }//GEN-LAST:event_spaceportsActionPerformed

    /**
     * Open a windows to show information about all spaceships
     *
     * @param evt
     */
    private void spaceshipsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_spaceshipsActionPerformed
        Informations information = new Informations("spaceships");
        changeIF(information);
    }//GEN-LAST:event_spaceshipsActionPerformed

    /**
     * Open a window to show information about the state of spaceports
     *
     * @param evt
     */
    private void spaceportsStatusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_spaceportsStatusActionPerformed
        Informations information = new Informations("byStatus");
        changeIF(information);
    }//GEN-LAST:event_spaceportsStatusActionPerformed

    /**
     * Method that allow to change different windows in desktop
     *
     * @param f
     */
    private void changeIF(JInternalFrame f) {
        desktop.add(f);
        f.setVisible(true);
        f.setMaximizable(true);
        f.setBorder(null);
        BasicInternalFrameUI bi = (BasicInternalFrameUI) f.getUI();
        bi.setNorthPane(null);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem deleteSpaceship;
    private javax.swing.JMenuItem departures;
    private javax.swing.JDesktopPane desktop;
    private javax.swing.JMenuItem endCleaning;
    private javax.swing.JMenuItem endMaintenance;
    private javax.swing.JMenu flight;
    private javax.swing.JMenu general;
    private javax.swing.JMenu informations;
    private javax.swing.JMenuItem landings;
    private javax.swing.JMenuBar mainPanel;
    private javax.swing.JMenuItem newRunway;
    private javax.swing.JMenuItem newSpaceport;
    private javax.swing.JMenuItem newSpaceship;
    private javax.swing.JMenu notifications;
    private javax.swing.JMenuItem spaceports;
    private javax.swing.JMenuItem spaceportsStatus;
    private javax.swing.JMenuItem spaceships;
    // End of variables declaration//GEN-END:variables
}
