/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package windowsApp;

import Exceptions.ExceptionsDatabase;
import SwingTools.SwingTools;
import exceptions.ExceptionsDao;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import dao.Dao;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author dafna
 */
public class EndCleaning extends javax.swing.JInternalFrame {

    /**
     * Creates new form EndCleaning
     */
    public EndCleaning() {
        initComponents();
        try {                                  
            SwingTools.getSwingTools().generateSelect(spaceport, "spaceport");
        } catch (SQLException | ExceptionsDao ex ) {
            JOptionPane.showMessageDialog(this, "" + ex.getMessage(), "Message", JOptionPane.WARNING_MESSAGE);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        spaceport = new javax.swing.JComboBox<>();
        runway = new javax.swing.JComboBox<>();
        complete = new javax.swing.JButton();

        spaceport.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                spaceportItemStateChanged(evt);
            }
        });

        complete.setText("Complete cleaning");
        complete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                completeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(spaceport, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(127, 127, 127)
                        .addComponent(runway, javax.swing.GroupLayout.PREFERRED_SIZE, 231, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(156, 156, 156)
                        .addComponent(complete, javax.swing.GroupLayout.PREFERRED_SIZE, 292, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(140, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(runway, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)
                    .addComponent(spaceport))
                .addGap(94, 94, 94)
                .addComponent(complete)
                .addContainerGap(169, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void spaceportItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_spaceportItemStateChanged
        String spaceportSelected = spaceport.getSelectedItem().toString();        
        if(spaceportSelected.equalsIgnoreCase("Choose a runway")){
            JOptionPane.showMessageDialog(this, "You have not selected any runway", "Message", JOptionPane.WARNING_MESSAGE);
        }else{
            try {                
                SwingTools.getSwingTools().generateDynamicSelect(runway, spaceportSelected, "CLEANING");
            } catch (SQLException | ExceptionsDao ex) {
                JOptionPane.showMessageDialog(this, "" + ex.getMessage(), "Message", JOptionPane.WARNING_MESSAGE);
            }
        }  
    }//GEN-LAST:event_spaceportItemStateChanged

    private void completeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_completeActionPerformed
        String spaceportSelected = spaceport.getSelectedItem().toString();
        String runwaySelected = runway.getSelectedItem().toString();
        if(spaceportSelected.equalsIgnoreCase("Choose a spacesport") || spaceportSelected.trim().equalsIgnoreCase("Choose a spacesport")){
            JOptionPane.showMessageDialog(this, "You have not selected any spaceport", "Message", JOptionPane.WARNING_MESSAGE);
        }else{
            if(runwaySelected.equalsIgnoreCase("Choose a spacesport") || runwaySelected.trim().equalsIgnoreCase("Choose a spacesport")){
            JOptionPane.showMessageDialog(this, "You have not selected any tunway", "Message", JOptionPane.WARNING_MESSAGE);
        }else{
                try {
                    Dao.getDao().updateRunwayCleaning(spaceportSelected, runwaySelected);
                    JOptionPane.showMessageDialog(this, "Cleaning completed successful.", "Message", JOptionPane.INFORMATION_MESSAGE);
                } catch (SQLException | ExceptionsDatabase ex) {
                    JOptionPane.showMessageDialog(this, "" + ex.getMessage(), "Message", JOptionPane.WARNING_MESSAGE);
                }
            }
        }
    }//GEN-LAST:event_completeActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton complete;
    private javax.swing.JComboBox<String> runway;
    private javax.swing.JComboBox<String> spaceport;
    // End of variables declaration//GEN-END:variables
}
